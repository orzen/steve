// vim: ft=go

{{ $Resources := .Proto.Resources }}

package main

import (
	"context"
	"os"

	"github.com/orzen/steve/_build/api"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/urfave/cli/v2"
	"google.golang.org/grpc"
)

var (
	SteveVersion = "{{ .SteveVersion }}"
	AppName      = "{{ .AppName }}"
	AppVersion   = "{{ .AppVersion }}"
)

func main() {
	zerolog.SetGlobalLevel(zerolog.InfoLevel)
	log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})

	wd, err := os.Getwd()
	if err != nil {
		log.Fatal().Err(err).Msgf("get workdir: %v", err)
	}

	client := api.NewAPIClient()

{{ range $res := $Resources }}
	sub{{$res.Name}} := []*cli.Command {
{{- range $op := $res.Operations }}
		{
			Name: "{{$op}}",
			Flags: []cli.Flag{
{{- if eq "set" $op }}
{{ ResourceToFlag $res 4 }}
{{ end }}
{{- if eq "get" $op }}
	{{ MetaToFlag $res 4 -}}
{{ end }}
{{- if eq "list" $op }}
	{{ MetaToFlag $res 4 -}}
{{ end }}
{{- if eq "delete" $op }}
	{{ MetaToFlag $res 4 -}}
{{ end }}
			},
			Action: func(c *cli.Context) error {
{{- if eq "set" $op }}
				in := &api.{{$res.Name}}{
	{{ ResourceToAction $res 5 }}
				}
				res, err := client.Set{{$res.Name}}(context.TODO(), in)
{{ end }}
{{- if eq "get" $op }}
				res, err := client.Get{{$res.Name}}(context.TODO(), in)
{{ end }}
{{- if eq "list" $op }}
				res, err := client.List{{$res.Name}}(context.TODO(), in)
{{ end }}
{{- if eq "delete" $op }}
				res, err := client.Delete{{$res.Name}}(context.TODO(), in)
{{ end }}
				output := console.New()
				output.WithErr(err).WithData(res)
				if c.Bool("pretty") {
					output.WithPretty()
				}
				output.Print("success")
			},
		},
{{- end }}
	}
{{ end }}

	commands := []*cli.Command {
{{ range $res := $Resources }}
		{
			Name: "{{$res.Name}}",
			Subcommands: sub{{$res.Name}},
		},
{{ end }}
	} // Command

	flags := []cli.Flag{
		&cli.StringFlag{
			Name:     "host",
			Value:    "",
			Usage:    "Build directory",
			Required: true,
		},
		&cli.IntFlag{
			Name:     "port",
			Value:    7700,
			Usage:    "steve specification directory",
			Required: true,
		},
		&cli.BoolFlag{
			Name:     "json",
			Usage:    "Output in JSON format",
			Required: false,
		},
		&cli.BoolFlag{
			Name:     "pretty",
			Usage:    "Pretty print the output",
			Required: false,
		},
		&cli.BoolFlag{
			Name:     "verbose",
			Usage:    "Increase verbosity",
			Required: false,
		},
	}

	cli.VersionPrinter = func(cCtx *cli.Context) {
		fmt.Printf("%s version '%s' generated by steve version '{{.SteveVersion}}'\n", cCtx.App.Name, cCtx.App.Version)
	}

	cli.VersionFlag = &cli.BoolFlag{
		Name:  "version",
		Usage: "display the version and exit",
	}

	app := &cli.App{
		Name:    "{{.AppName}}ctl",
		Version: "{{.AppVersion}}",
		Flags:   flags,
		Commands: commands,
	}

	if err := app.Run(os.Args); err != nil {
		log.Fatal().Err(err).Msg("run steve")
	}

}
