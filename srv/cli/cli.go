package inner

import (
	"fmt"
	"os"

	"github.com/urfave/cli/v2"
)

type Cli struct {
	Flags []cli.Flag
}

var (
	DefaultFlags = []cli.Flag{
		&cli.StringFlag{
			Name:  "listen-addr",
			Value: "0.0.0.0",
			Usage: "Application listen address",
		},
		&cli.IntFlag{
			Name:  "listen-port",
			Value: 7700,
			Usage: "Application listen port",
		},
		&cli.StringFlag{
			Name:  "log-level",
			Value: "info",
			Usage: "Set log level (debug, info, warn, error)",
		},
		&cli.BoolFlag{
			Name:  "pretty",
			Usage: "Set log format to pretty print",
		},
	}
)

func NewCli() *Cli {
	return &Cli{
		Flags: DefaultFlags,
	}
}

func (c *Cli) AppendFlags(opts []cli.Flag) {
	c.Flags = append(c.Flags, opts...)
}

func (c *Cli) Finalize(appName, appVersion, steveVersion string, action cli.ActionFunc) error {
	cli.VersionPrinter = func(cCtx *cli.Context) {
		fmt.Printf("%s version '%s' generated by steve version '%s'\n", cCtx.App.Name, cCtx.App.Version, steveVersion)
	}

	cli.VersionFlag = &cli.BoolFlag{
		Name:  "version",
		Usage: "display the version and exit",
	}

	app := &cli.App{
		Name:    appName,
		Version: appVersion,
		Flags:   c.Flags,
		Action:  action,
	}

	return app.Run(os.Args)
}

func (c *Cli) WithTLS() {
	cert := &cli.StringFlag{
		Name:     "tls-cert",
		Value:    "",
		Usage:    "",
		Required: true,
	}
	key := &cli.StringFlag{
		Name:     "tls-key",
		Value:    "",
		Usage:    "",
		Required: true,
	}
	c.Flags = append(c.Flags, cert, key)
}
